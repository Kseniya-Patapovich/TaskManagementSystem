package com.taskmanagementsystem.service;

import com.taskmanagementsystem.exception.TaskNotFoundException;
import com.taskmanagementsystem.exception.UnauthorizedTaskAccessException;
import com.taskmanagementsystem.exception.UserIsNotAuthorException;
import com.taskmanagementsystem.model.Task;
import com.taskmanagementsystem.model.UserEntity;
import com.taskmanagementsystem.model.dto.TaskCreateDto;
import com.taskmanagementsystem.model.enums.Priority;
import com.taskmanagementsystem.model.enums.Status;
import com.taskmanagementsystem.repository.TaskRepository;
import com.taskmanagementsystem.repository.UserRepository;
import com.taskmanagementsystem.security.UserEntityDetails;
import com.taskmanagementsystem.utils.UserUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;

import java.time.LocalDate;
import java.util.Collections;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class TaskServiceTest {
    @Mock
    private TaskRepository taskRepository;

    @Mock
    private UserUtils userUtils;

    @Mock
    private UserRepository userRepository;

    @Mock
    private UserService userService;

    @InjectMocks
    private TaskService taskService;

    private UserEntity user;
    private UserEntityDetails userEntityDetails;
    private Task task;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        user = new UserEntity();
        user.setId(1L);
        user.setEmail("test@example.com");
        user.setPassword("testPassword");

        userEntityDetails = new UserEntityDetails(user);

        task = new Task();
        task.setId(1L);
        task.setAuthor(user);

        when(taskRepository.save(any(Task.class))).thenAnswer(invocation -> {
            Task savedTask = invocation.getArgument(0);
            savedTask.setId(1L); // Set ID as if it were generated by the database
            return savedTask;
        });

        when(userUtils.getCurrentUser()).thenReturn(userEntityDetails);
        when(userService.getUserByEmail(anyString())).thenReturn(user);
        when(userRepository.existsByEmail(anyString())).thenReturn(true);
        when(userRepository.existsById(anyLong())).thenReturn(true);
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(user));
    }


    @Test
    public void testGetAllTaskSuccess() {
        Page<Task> taskPage = new PageImpl<>(Collections.singletonList(task));
        when(taskRepository.findAll(any(PageRequest.class))).thenReturn(taskPage);

        assertEquals(1, taskService.getAllTasks(PageRequest.of(0, 10)).size());
    }

    @Test
    public void testGetTaskByTitleSuccess() {
        when(taskRepository.findByTitle(anyString())).thenReturn(Optional.of(task));

        Task foundTask = taskService.getTaskByTitle("Test Task");

        assertEquals(task.getId(), foundTask.getId());
    }


    @Test
    public void testGetTaskByTitleNotFound() {
        when(taskRepository.findByTitle(anyString())).thenReturn(Optional.empty());

        assertThrows(TaskNotFoundException.class, () -> taskService.getTaskByTitle("Non-existent Task"));
    }

    @Test
    public void testTasksByAuthorSuccess() {
        when(userRepository.existsById(anyLong())).thenReturn(true);
        Page<Task> taskPage = new PageImpl<>(Collections.singletonList(task));
        when(taskRepository.findAllByAuthorId(anyLong(), any(PageRequest.class))).thenReturn(taskPage);

        assertEquals(1, taskService.tasksByAuthor(1L, PageRequest.of(0, 10)).size());
    }

    @Test
    public void testTasksByAssigneeSuccess() {
        when(userRepository.existsById(anyLong())).thenReturn(true);
        Page<Task> taskPage = new PageImpl<>(Collections.singletonList(task));
        when(taskRepository.findAllByAssigneeId(anyLong(), any(PageRequest.class))).thenReturn(taskPage);

        assertEquals(1, taskService.tasksByAssignee(1L, PageRequest.of(0, 10)).size());
    }

    @Test
    public void testEditAssigneeUserIsNotAuthorException() {
        Task task = new Task();
        task.setId(1L);
        UserEntity author = new UserEntity();
        author.setEmail("other@example.com");

        UserEntity assignee = new UserEntity();
        assignee.setId(2L);

        UserEntityDetails userDetails = mock(UserEntityDetails.class);
        when(userDetails.getUsername()).thenReturn("author@example.com");
        when(userUtils.getCurrentUser()).thenReturn(userDetails);
        when(userService.getUserByEmail(anyString())).thenReturn(author);
        when(taskRepository.findById(anyLong())).thenReturn(Optional.of(task));
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(assignee));

        assertThrows(UserIsNotAuthorException.class, () -> taskService.editAssignee(1L, 2L));
    }

    @Test
    public void testCreateTaskSuccess(){
        TaskCreateDto taskCreateDto = new TaskCreateDto();
        taskCreateDto.setTitle("New Task");
        taskCreateDto.setDescription("Task Description");
        taskCreateDto.setDeadline(LocalDate.now().plusDays(1));
        taskCreateDto.setPriority(Priority.HIGH);
        taskCreateDto.setAssigneeId(2L);

        UserEntity assignee = new UserEntity();
        assignee.setId(2L);

        when(userUtils.getCurrentUser()).thenReturn(userEntityDetails);
        when(userRepository.existsByEmail(anyString())).thenReturn(true);
        when(userRepository.existsById(anyLong())).thenReturn(true);
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(assignee));
        when(userService.getUserByEmail(anyString())).thenReturn(user);

        Long taskId = taskService.createTask(taskCreateDto);

        assertNotNull(taskId);
        verify(taskRepository).save(any(Task.class));
    }

    @Test
    public void testEditAssigneeSuccess(){
        UserEntity newAssignee = new UserEntity();
        newAssignee.setId(2L);

        when(taskRepository.findById(anyLong())).thenReturn(Optional.of(task));
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(newAssignee));
        when(userUtils.getCurrentUser()).thenReturn(userEntityDetails);

        taskService.editAssignee(1L, 2L);

        assertEquals(newAssignee, task.getAssignee());
        verify(taskRepository).save(task);
    }

    @Test
    public void testEditStatusSuccess(){
        UserEntity assignee = new UserEntity();
        assignee.setId(1L);
        task.setAssignee(assignee);

        when(taskRepository.findById(anyLong())).thenReturn(Optional.of(task));
        when(userUtils.getCurrentUser()).thenReturn(userEntityDetails);

        taskService.editStatus(1L, Status.COMPLETED);

        assertEquals(Status.COMPLETED, task.getStatus());
        verify(taskRepository).save(task);
    }

    @Test
    public void testEditStatusUserIsNotAssigneeException(){
        UserEntity anotherAssignee = new UserEntity();
        anotherAssignee.setId(2L);
        task.setAssignee(anotherAssignee);

        when(taskRepository.findById(anyLong())).thenReturn(Optional.of(task));
        when(userUtils.getCurrentUser()).thenReturn(userEntityDetails);

        assertThrows(UnauthorizedTaskAccessException.class, () -> taskService.editStatus(1L, Status.COMPLETED));
    }

    @Test
    public void testEditPrioritySuccess(){
        when(taskRepository.findById(anyLong())).thenReturn(Optional.of(task));
        when(userUtils.getCurrentUser()).thenReturn(userEntityDetails);

        taskService.editPriority(1L, Priority.LOW);

        assertEquals(Priority.LOW, task.getPriority());
        verify(taskRepository).save(task);
    }

    @Test
    public void testDeleteTaskSuccess(){
        when(taskRepository.findById(anyLong())).thenReturn(Optional.of(task));
        when(userUtils.getCurrentUser()).thenReturn(userEntityDetails);

        taskService.deleteTask(1L);

        verify(taskRepository).deleteById(1L);
    }

    @Test
    public void testDeleteTaskUserIsNotAuthorException(){
        UserEntity anotherUser = new UserEntity();
        anotherUser.setId(2L);
        task.setAuthor(anotherUser);

        when(taskRepository.findById(anyLong())).thenReturn(Optional.of(task));
        when(userUtils.getCurrentUser()).thenReturn(userEntityDetails);

        assertThrows(UserIsNotAuthorException.class, () -> taskService.deleteTask(1L));
    }
}
